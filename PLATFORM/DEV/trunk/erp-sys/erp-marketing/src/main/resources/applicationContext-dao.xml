<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
       default-lazy-init="true">

    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="lobHandler" ref="oracleLobHandler" />
       <!-- <property name="configLocation" value="classpath:hibernate.cfg.xml"/>-->
         <property name="configLocations">
            <list>
                <value>classpath*:hibernate.cfg.xml</value>
                <value>classpath*:com/chinadrtv/erp/marketing/core/hibernate.cfg.xml</value>
            </list>
        </property>
         
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.show_sql=false
                hibernate.format_sql=false
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
                hibernate.cache.use_second_level_cache=false
                hibernate.cache.use_query_cache=false
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>

        <property name="schemaUpdate">
            <value>false</value>
        </property>
    </bean>

    <!-- Transaction manager f f or a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    
    <!-- Hibernate SessionFactory 
    <bean id="sessionFactoryBI" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSourceBI"/>
        <property name="configLocation" value="classpath:hibernate_bi.cfg.xml"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.show_sql=false
                hibernate.format_sql=false
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
                hibernate.cache.use_second_level_cache=false
                hibernate.cache.use_query_cache=false
            </value>
        </property>

        <property name="schemaUpdate">
            <value>false</value>
        </property>
    </bean>
-->
    <!-- Transaction manager f f or a single Hibernate SessionFactory (alternative to JTA) 
    <bean id="transactionManagerBI" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactoryBI"/>
    </bean>
    -->
        <!-- Hibernate SessionFactory -->
    <bean id="sessionFactorySms" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSourceSms"/>
        <property name="configLocation" value="classpath:hibernate_sms.cfg.xml"/>
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=${hibernate.dialect}
                hibernate.query.substitutions=true 'Y', false 'N'
                hibernate.show_sql=false
                hibernate.format_sql=false
                hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
                hibernate.cache.use_second_level_cache=false
                hibernate.cache.use_query_cache=false
            </value>
            <!-- Turn batching off for better error messages under PostgreSQL -->
            <!-- hibernate.jdbc.batch_size=0 -->
        </property>

        <property name="schemaUpdate">
            <value>false</value>
        </property>
    </bean>
    
    
        <!-- Transaction manager f f or a single Hibernate SessionFactory (alternative to JTA) -->
    <bean id="transactionManagerSms" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactorySms"/>
    </bean>
    
    
    
    <!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Activates scanning of @Repository -->
    <context:component-scan base-package="com.chinadrtv.erp"/>
    <!-- clob 字段 -->
	<bean id="nativeJdbcExtractor"
	        class="org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor"
	        lazy-init="true" />
	 
	    <bean id="oracleLobHandler"
	        class="org.springframework.jdbc.support.lob.OracleLobHandler"
	        lazy-init="true">
	        <property name="nativeJdbcExtractor">
	            <ref bean="nativeJdbcExtractor" />
	        </property>
	    </bean>


    <!-- Compass Search Section -->

    <!-- Compass Bean, automatically scanning for searchable classes within the model -->
    <!-- Hooks into Spring transaction management and stores the index on the file system -->
    <bean id="compass" class="org.compass.spring.LocalCompassBean">
        <property name="mappingScan" value="com.chinadrtv"/>
        <property name="transactionManager" ref="transactionManager" />
        <property name="settings">
            <map>
                <entry key="compass.engine.connection" value="ram://index"/>
            </map>
        </property>
    </bean>

    <!-- Compass Template allowing to automatically join/start exising transactions when performing operations -->
    <bean id="compassTemplate" class="org.compass.core.CompassTemplate">
        <property name="compass" ref="compass" />
    </bean>

    <!-- Compass Search Helper allowing to perform search operations in a simpler manner -->
    <bean id="compassSearchHelper" class="org.compass.core.support.search.CompassSearchHelper">
        <constructor-arg ref="compass" />
        <property name="pageSize" value="10" />
    </bean>

    <!-- CompassGps will automatically mirror any changes done thorugh Hibernate to searchable classes to the index -->
    <!-- It will also provide the index operation allowing to reindex the database -->
    <bean id="compassGps" class="org.compass.gps.impl.SingleCompassGps" init-method="start" destroy-method="stop">
        <property name="compass" ref="compass" />
        <property name="gpsDevices">
            <list>
                <bean class="org.compass.gps.device.hibernate.HibernateGpsDevice">
                    <property name="name" value="hibernate" />
                    <property name="sessionFactory" ref="sessionFactory" />
                </bean>
            </list>
        </property>
    </bean>
</beans>
